rm(alpha,beta,i,nsim,z.alpha,z.beta,OR1,OR2,p0_ce,p0_e1,p0_e2,f_OR,scenarios,scenarios1,scenarios2,scenarios3)
save.image("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/results_decision.RData")
##############################################################
OR_function<- function(p0, p1){
OR<- (p1/(1-p1))/(p0/(1-p0))
return(OR)
}
##############################################################
fun_p0 <- function(p,l){
p = p*2
sol1= -(1 + l + p - l*p + sqrt(4*(-1 + l)*p + (1 + l + p - l*p)^2))/(2*(-1 + l))
sol2= -(1 + l + p - l*p - sqrt(4*(-1 + l)*p + (1 + l + p - l*p)^2))/(2*(-1 + l))
if(sol2>0 & sol2<1){
p0=sol2
}else{
p0=sol1
}
return(p0)
}
# p=p1_e1+p0_e1
# l=OR1
# fun_p0(p=p,l=l)
##############################################################
f_ES <- function(samplesize,p0_e1,p1_e1,p0_e2,p1_e2,p0_ce,p1_ce,upp,low){
ss=samplesize/2
# control group
s1_group0 = p0_e1 + p0_e2 - p0_ce
s2_group0 = p0_ce-p0_e2
s3_group0 = p0_ce-p0_e1
s4_group0 = 1- p0_ce
sm0 = rmultinom(1,ss,c(s1_group0,s2_group0,s3_group0,s4_group0))
# intervention group
s1_group1 = p1_e1+p1_e2-p1_ce
s2_group1 = ifelse(p1_ce-p1_e2>0, p1_ce-p1_e2, 0)
s3_group1 = ifelse(p1_ce-p1_e1>0, p1_ce-p1_e1, 0)
s4_group1 = 1- p1_ce
sm1 = rmultinom(1,ss,c(s1_group1,s2_group1,s3_group1,s4_group1))
# pooled sample
sm = sm0 + sm1
phat_e1 = (sm[1]+sm[2])/samplesize
phat_e2 = (sm[1]+sm[3])/samplesize
phat_ce = 1-(sm[4])/samplesize
OR1 = OR_function(p0_e1,p1_e1)
OR2 = OR_function(p0_e2,p1_e2)
OR_ce = OR_function(p0_ce,p1_ce)
phat0_e1 = fun_p0(p=phat_e1,l=OR1)
phat0_e2 = fun_p0(p=phat_e2,l=OR2)
phat0_ce = fun_p0(p=phat_ce,l=OR_ce)
corrhat = ((phat0_e1+phat0_e2-phat0_ce)-phat0_e1*phat0_e2)/sqrt(phat0_e1*(1-phat0_e1)*phat0_e2*(1-phat0_e2))
update_uppcorr0=upper_corr(phat0_e1,phat0_e2)
update_uppcorr1=upper_corr((OR1*phat0_e1/(1-phat0_e1))/(1+(OR1*phat0_e1/(1-phat0_e1))),(OR2*phat0_e2/(1-phat0_e2))/(1+(OR2*phat0_e2/(1-phat0_e2))))
update_lowcorr0= lower_corr(phat0_e1,phat0_e2)
update_lowcorr1=lower_corr((OR1*phat0_e1/(1-phat0_e1))/(1+(OR1*phat0_e1/(1-phat0_e1))),(OR2*phat0_e2/(1-phat0_e2))/(1+(OR2*phat0_e2/(1-phat0_e2))))
corrhat_c = corrhat
if(corrhat > upp || corrhat > update_uppcorr0 || corrhat > update_uppcorr1){
corrhat_c = min(upp,upper_corr(phat0_e1,phat0_e2))
}
if(corrhat < low || corrhat < update_lowcorr0 || corrhat < update_lowcorr1){
corrhat_c = max(low,lower_corr(phat0_e1,phat0_e2),lower_corr((OR1*phat0_e1/(1-phat0_e1))/(1+(OR1*phat0_e1/(1-phat0_e1))),(OR2*phat0_e2/(1-phat0_e2))/(1+(OR2*phat0_e2/(1-phat0_e2)))))
}
# decision based on blinded data
ARE_up = ARE_cbe(p0_e1=phat0_e1, p0_e2=phat0_e2, eff_e1=OR1, eff_e2=OR2, rho=corrhat_c)
# p0_e1=phat0_e1; p0_e2=phat0_e2; eff_e1=OR1; eff_e2=OR2; rho=corrhat_c
if(ARE_up>= 1){
phat_group1 = 1-(sm1[4])/ss
phat_group0 = 1-(sm0[4])/ss
# test odds ratio RE
TestOR_unpooled = log((phat_group1/(1-phat_group1))/(phat_group0/(1-phat_group0)))*((1/(phat_group0*(1-phat_group0))+ 1/(phat_group1*(1-phat_group1)))/ss)^(-1/2)
}else{
phat_group1 = (sm1[1]+sm1[2])/ss
phat_group0 = (sm0[1]+sm0[2])/ss
# test odds ratio RE
TestOR_unpooled = log((phat_group1/(1-phat_group1))/(phat_group0/(1-phat_group0)))*((1/(phat_group0*(1-phat_group0))+ 1/(phat_group1*(1-phat_group1)))/ss)^(-1/2)
}
return(TestOR_unpooled)
}
#########################################
t0=Sys.time()
dataset$Test_Reject_SEL = 0
for(i in 1:dim(dataset)[1]){
dataset$Test_Reject_SEL[i] <- sum(replicate(nsim,f_ES(samplesize=2*n0,p0_e1=dataset$p0_e1[i],p1_e1=dataset$p1_e1[i],p0_e2=dataset$p0_e2[i],p1_e2=dataset$p1_e2[i],p0_ce=dataset$p0_ce[i],p1_ce=dataset$p1_ce[i],upp=dataset$max_corr[i],low=dataset$min_corr[i]))< - z.alpha)/nsim
print(i)
}
t1=Sys.time()-t0
rm(alpha,beta,i,nsim,z.alpha,z.beta,OR1,OR2,p0_ce,p0_e1,p0_e2,f_OR,scenarios,scenarios1,scenarios2,scenarios3)
save.image("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/results_decision.RData")
##################################################################################
# Research project Vienna - Bcn
# Endpoint selection and sample size reassessment for composite binary endpoints
# Simulation study
##################################################################################
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions_ce.R')
# setwd("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection")
# source('C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions.R')
# source('C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions_ce.R')
#########################################
# Preamble
#########################################
library(tidyverse)
library(tidyr)
library(plyr)
library(devtools)
install_github("CompARE-Composite/CompARE-package")
library(CompARE)
#########################################
# Define the set of scenarios
#########################################
# Scenarios
p0_e1 = c(0.1, 0.2)
p0_e2 = c(0.1, 0.2, 0.3)
OR1 = c(0.6, 0.7, 0.8, 0.9)
OR2 = c(0.65, 0.7, 0.8)
scenarios = expand_grid(p0_e1,p0_e2,OR1,OR2)
# Probabilities treat group
scenarios$p1_e1 = (scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1))/(1+(scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1)))
scenarios$p1_e2 = (scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2))/(1+(scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2)))
# Calculate the correlation bounds
scenarios$min_corr0 = mapply(lower_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$min_corr1 = mapply(lower_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$max_corr0 = mapply(upper_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$max_corr1 = mapply(upper_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$min_corr = pmax(scenarios$min_corr0,scenarios$min_corr1)
scenarios$max_corr = pmin(scenarios$max_corr0,scenarios$max_corr1)
scenarios1 = scenarios; scenarios2 = scenarios; scenarios3 = scenarios
scenarios3$corr = (scenarios3$max_corr)/3
scenarios2$corr = (scenarios2$max_corr)/2
scenarios1$corr = scenarios1$max_corr
scenarios$corr = 0
dataset = rbind(scenarios,scenarios1,scenarios2,scenarios3)
# Calculate CE Probabilities
dataset$p0_ce = mapply(prob_cbe, p_e1=dataset$p0_e1, p_e2=dataset$p0_e2, rho=dataset$corr)
dataset$p1_ce = mapply(prob_cbe, p_e1=dataset$p1_e1, p_e2=dataset$p1_e2, rho=dataset$corr)
dataset$OR_ce = (dataset$p1_ce/(1-dataset$p1_ce))/(dataset$p0_ce/(1-dataset$p0_ce))
# Calculate ARE
dataset$ARE = mapply(ARE_cbe, p0_e1=dataset$p0_e1, p0_e2=dataset$p0_e2, eff_e1=dataset$OR1, eff_e2=dataset$OR2, rho=dataset$corr)
dataset$decision = ifelse(dataset$ARE<1, "RE", "CE")
#########################################
# Simulations
#########################################
set.seed(4123)
# nsim: number of simulations
nsim = 100000
# sample size per arm n0=n1
n0 = 500
# type i and ii errors
alpha=0.025; beta=0.2
z.alpha <- qnorm(1-alpha,0,1)
z.beta <-  qnorm(1-beta,0,1)
#########################################
t0=Sys.time()
dataset$Test_Reject_CE = 0
dataset$Test_Reject_RE = 0
#########################################
t0=Sys.time()
dataset$Test_Reject_SEL = 0
for(i in 1:dim(dataset)[1]){
dataset$Test_Reject_SEL[i] <- sum(replicate(nsim,f_ES(samplesize=2*n0,p0_e1=dataset$p0_e1[i],p1_e1=dataset$p1_e1[i],p0_e2=dataset$p0_e2[i],p1_e2=dataset$p1_e2[i],p0_ce=dataset$p0_ce[i],p1_ce=dataset$p1_ce[i],upp=dataset$max_corr[i],low=dataset$min_corr[i]))< - z.alpha)/nsim
print(i)
}
t1=Sys.time()-t0
rm(alpha,beta,i,nsim,z.alpha,z.beta,OR1,OR2,p0_ce,p0_e1,p0_e2,f_OR,scenarios,scenarios1,scenarios2,scenarios3)
save.image("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/results_decision.RData")
View(dataset)
t1=Sys.time()-t0
t1
##################################################################################
# Research project Vienna - Bcn
# Endpoint selection and sample size reassessment for composite binary endpoints
# Simulation study
##################################################################################
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions_ce.R')
# setwd("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection")
# source('C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions.R')
# source('C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions_ce.R')
#########################################
# Preamble
#########################################
library(tidyverse)
library(tidyr)
library(plyr)
library(devtools)
install_github("CompARE-Composite/CompARE-package")
library(CompARE)
#########################################
# Define the set of scenarios
#########################################
# Scenarios
p0_e1 = c(0.1, 0.2)
p0_e2 = c(0.1, 0.2, 0.3)
OR1 = c(0.6, 0.7, 0.8, 0.9)
OR2 = c(0.65, 0.7, 0.8)
scenarios = expand_grid(p0_e1,p0_e2,OR1,OR2)
# Probabilities treat group
scenarios$p1_e1 = (scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1))/(1+(scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1)))
scenarios$p1_e2 = (scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2))/(1+(scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2)))
# Calculate the correlation bounds
scenarios$min_corr0 = mapply(lower_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$min_corr1 = mapply(lower_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$max_corr0 = mapply(upper_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$max_corr1 = mapply(upper_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$min_corr = pmax(scenarios$min_corr0,scenarios$min_corr1)
scenarios$max_corr = pmin(scenarios$max_corr0,scenarios$max_corr1)
scenarios1 = scenarios; scenarios2 = scenarios; scenarios3 = scenarios
scenarios3$corr = (scenarios3$max_corr)/3
scenarios2$corr = (scenarios2$max_corr)/2
scenarios1$corr = scenarios1$max_corr
scenarios$corr = 0
dataset = rbind(scenarios,scenarios1,scenarios2,scenarios3)
# Calculate CE Probabilities
dataset$p0_ce = mapply(prob_cbe, p_e1=dataset$p0_e1, p_e2=dataset$p0_e2, rho=dataset$corr)
dataset$p1_ce = mapply(prob_cbe, p_e1=dataset$p1_e1, p_e2=dataset$p1_e2, rho=dataset$corr)
dataset$OR_ce = (dataset$p1_ce/(1-dataset$p1_ce))/(dataset$p0_ce/(1-dataset$p0_ce))
# Calculate ARE
dataset$ARE = mapply(ARE_cbe, p0_e1=dataset$p0_e1, p0_e2=dataset$p0_e2, eff_e1=dataset$OR1, eff_e2=dataset$OR2, rho=dataset$corr)
dataset$decision = ifelse(dataset$ARE<1, "RE", "CE")
rm(OR1,OR2,p0_ce,p0_e1,p0_e2,scenarios,scenarios1,scenarios2,scenarios3)
##################################################################################
# Research project Vienna - Bcn
# Endpoint selection and sample size reassessment for composite binary endpoints
# Simulation study
##################################################################################
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions_ce.R')
# setwd("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection")
# source('C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions.R')
# source('C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions_ce.R')
#########################################
# Preamble
#########################################
library(tidyverse)
library(tidyr)
library(plyr)
library(devtools)
install_github("CompARE-Composite/CompARE-package")
library(CompARE)
#########################################
# Define the set of scenarios
#########################################
# Scenarios
p0_e1 = c(0.1, 0.2)
p0_e2 = c(0.1, 0.2, 0.3)
OR1 = c(0.6, 0.7, 0.8, 0.9)
OR2 = c(0.65, 0.7, 0.8)
scenarios = expand_grid(p0_e1,p0_e2,OR1,OR2)
# Probabilities treat group
scenarios$p1_e1 = (scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1))/(1+(scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1)))
scenarios$p1_e2 = (scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2))/(1+(scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2)))
# Calculate the correlation bounds
scenarios$min_corr0 = mapply(lower_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$min_corr1 = mapply(lower_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$max_corr0 = mapply(upper_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$max_corr1 = mapply(upper_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$min_corr = pmax(scenarios$min_corr0,scenarios$min_corr1)
scenarios$max_corr = pmin(scenarios$max_corr0,scenarios$max_corr1)
scenarios1 = scenarios; scenarios2 = scenarios; scenarios3 = scenarios
scenarios3$corr = (scenarios3$max_corr)/3
scenarios2$corr = (scenarios2$max_corr)/2
scenarios1$corr = scenarios1$max_corr
scenarios$corr = 0
dataset = rbind(scenarios,scenarios1,scenarios2,scenarios3)
# Calculate CE Probabilities
dataset$p0_ce = mapply(prob_cbe, p_e1=dataset$p0_e1, p_e2=dataset$p0_e2, rho=dataset$corr)
dataset$p1_ce = mapply(prob_cbe, p_e1=dataset$p1_e1, p_e2=dataset$p1_e2, rho=dataset$corr)
dataset$OR_ce = (dataset$p1_ce/(1-dataset$p1_ce))/(dataset$p0_ce/(1-dataset$p0_ce))
# Calculate ARE
dataset$ARE = mapply(ARE_cbe, p0_e1=dataset$p0_e1, p0_e2=dataset$p0_e2, eff_e1=dataset$OR1, eff_e2=dataset$OR2, rho=dataset$corr)
dataset$decision = ifelse(dataset$ARE<1, "RE", "CE")
rm(OR1,OR2,p0_ce,p0_e1,p0_e2,scenarios,scenarios1,scenarios2,scenarios3)
#########################################
# Simulations
#########################################
set.seed(4123)
# nsim: number of simulations
nsim = 100000
# sample size per arm n0=n1
n0 = 500
# type i and ii errors
alpha=0.025; beta=0.2
z.alpha <- qnorm(1-alpha,0,1)
z.beta <-  qnorm(1-beta,0,1)
t0=Sys.time()
dataset$Test_Reject_CE = 0
dataset$Test_Reject_RE = 0
dataset$Test_Reject_SEL = 0
#########################################
for(i in 1:dim(dataset)[1]){
dataset$Test_Reject_CE[i] <- sum(replicate(nsim,f_OR(n0,dataset$p0_ce[i],dataset$p1_ce[i]))< - z.alpha)/nsim
dataset$Test_Reject_RE[i] <- sum(replicate(nsim,f_OR(n0,dataset$p0_e1[i],dataset$p1_e1[i]))< - z.alpha)/nsim
print(i)
}
save.image("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/results.RData")
#########################################
for(i in 1:dim(dataset)[1]){
dataset$Test_Reject_SEL[i] <- sum(replicate(nsim,f_ES(samplesize=2*n0,p0_e1=dataset$p0_e1[i],p1_e1=dataset$p1_e1[i],p0_e2=dataset$p0_e2[i],p1_e2=dataset$p1_e2[i],p0_ce=dataset$p0_ce[i],p1_ce=dataset$p1_ce[i],upp=dataset$max_corr[i],low=dataset$min_corr[i]))< - z.alpha)/nsim
print(i)
}
t1=Sys.time()-t0
save.image("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/results_decision.RData")
t1=Sys.time()-t0
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results_decision.RData")
View(dataset)
dataset1 = expand_grid(rho, scenarios)
rho = c(0, 0.2, 0.4, 0.6, 0.8)
dataset1 = expand_grid(rho, scenarios)
View(dataset)
dataset1 = expand_grid(rho, scenarios)
library(tidyverse)
library(tidyr)
library(plyr)
library(devtools)
install_github("CompARE-Composite/CompARE-package")
library(CompARE)
#########################################
# Define the set of scenarios
#########################################
# Scenarios
p0_e1 = c(0.1, 0.2)
p0_e2 = c(0.1, 0.2, 0.3)
OR1 = c(0.6, 0.7, 0.8, 0.9)
OR2 = c(0.65, 0.7, 0.8)
scenarios = expand_grid(p0_e1,p0_e2,OR1,OR2)
# Probabilities treat group
scenarios$p1_e1 = (scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1))/(1+(scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1)))
scenarios$p1_e2 = (scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2))/(1+(scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2)))
# Calculate the correlation bounds
scenarios$min_corr0 = mapply(lower_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$min_corr1 = mapply(lower_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$max_corr0 = mapply(upper_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$max_corr1 = mapply(upper_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$min_corr = pmax(scenarios$min_corr0,scenarios$min_corr1)
scenarios$max_corr = pmin(scenarios$max_corr0,scenarios$max_corr1)
scenarios1 = scenarios; scenarios2 = scenarios; scenarios3 = scenarios
scenarios3$corr = (scenarios3$max_corr)/3
scenarios2$corr = (scenarios2$max_corr)/2
scenarios1$corr = scenarios1$max_corr
scenarios$corr = 0
rho = c(0, 0.2, 0.4, 0.6, 0.8)
dataset1 = expand_grid(rho, scenarios)
corr = c(0, 0.2, 0.4, 0.6, 0.8)
dataset1 = expand_grid(corr, scenarios)
dataset1$ind_corr = ifelse(dataset1$corr < dataset1$max_corr & dataset1$corr > dataset1$max_corr, 1, 0)
View(dataset)
View(dataset1)
dataset1$ind_corr = ifelse(dataset1$corr < dataset1$max_corr && dataset1$corr > dataset1$max_corr, 1, 0)
View(dataset1)
corr = c(0, 0.2, 0.4, 0.6, 0.8)
dataset1 = expand_grid(corr, scenarios)
library(tidyverse)
library(tidyr)
library(plyr)
library(devtools)
install_github("CompARE-Composite/CompARE-package")
library(CompARE)
#########################################
# Define the set of scenarios
#########################################
# Scenarios
p0_e1 = c(0.1, 0.2)
p0_e2 = c(0.1, 0.2, 0.3)
OR1 = c(0.6, 0.7, 0.8, 0.9)
OR2 = c(0.65, 0.7, 0.8)
scenarios = expand_grid(p0_e1,p0_e2,OR1,OR2)
# Probabilities treat group
scenarios$p1_e1 = (scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1))/(1+(scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1)))
scenarios$p1_e2 = (scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2))/(1+(scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2)))
# Calculate the correlation bounds
scenarios$min_corr0 = mapply(lower_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$min_corr1 = mapply(lower_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$max_corr0 = mapply(upper_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$max_corr1 = mapply(upper_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$min_corr = pmax(scenarios$min_corr0,scenarios$min_corr1)
scenarios$max_corr = pmin(scenarios$max_corr0,scenarios$max_corr1)
scenarios1 = scenarios; scenarios2 = scenarios; scenarios3 = scenarios
# scenarios3$corr = (scenarios3$max_corr)/3
# scenarios2$corr = (scenarios2$max_corr)/2
# scenarios1$corr = scenarios1$max_corr
# scenarios$corr = 0
corr = c(0, 0.2, 0.4, 0.6, 0.8)
dataset1 = expand_grid(corr, scenarios)
dataset1$ind_corr = ifelse(dataset1$corr < dataset1$max_corr && dataset1$corr > dataset1$max_corr, 1, 0)
View(dataset1)
View(dataset1)
dataset1$corr < dataset1$max_corr && dataset1$corr > dataset1$max_corr
dataset1$corr < dataset1$max_corr && dataset1$corr > dataset1$max_corr
dataset1$corr < dataset1$max_corr && dataset1$corr > dataset1$max_corr
dataset1$corr < dataset1$max_corr && dataset1$corr > dataset1$max_corr
p0_e1 = c(0.1, 0.2)
p0_e2 = c(0.1, 0.2, 0.3)
OR1 = c(0.6, 0.7, 0.8, 0.9)
OR2 = c(0.65, 0.7, 0.8)
scenarios = expand_grid(p0_e1,p0_e2,OR1,OR2)
# Probabilities treat group
scenarios$p1_e1 = (scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1))/(1+(scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1)))
scenarios$p1_e2 = (scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2))/(1+(scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2)))
# Calculate the correlation bounds
scenarios$min_corr0 = mapply(lower_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$min_corr1 = mapply(lower_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$max_corr0 = mapply(upper_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$max_corr1 = mapply(upper_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$min_corr = pmax(scenarios$min_corr0,scenarios$min_corr1)
scenarios$max_corr = pmin(scenarios$max_corr0,scenarios$max_corr1)
corr = c(0, 0.2, 0.4, 0.6, 0.8)
dataset = expand_grid(scenarios, corr)
dataset$ind_corr = ifelse(dataset$corr < dataset$max_corr && dataset$corr > dataset$max_corr, 1, 0)
dataset = subset(dataset$ind_corr==1)
dataset$corr < dataset$max_corr && dataset$corr > dataset$max_corr
# Scenarios
p0_e1 = c(0.1, 0.2)
p0_e2 = c(0.1, 0.2, 0.3)
OR1 = c(0.6, 0.7, 0.8, 0.9)
OR2 = c(0.65, 0.7, 0.8)
scenarios = expand_grid(p0_e1,p0_e2,OR1,OR2)
# Probabilities treat group
scenarios$p1_e1 = (scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1))/(1+(scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1)))
scenarios$p1_e2 = (scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2))/(1+(scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2)))
# Calculate the correlation bounds
scenarios$min_corr0 = mapply(lower_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$min_corr1 = mapply(lower_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$max_corr0 = mapply(upper_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$max_corr1 = mapply(upper_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$min_corr = pmax(scenarios$min_corr0,scenarios$min_corr1)
scenarios$max_corr = pmin(scenarios$max_corr0,scenarios$max_corr1)
corr = c(0, 0.2, 0.4, 0.6, 0.8)
dataset = expand_grid(scenarios, corr)
# dataset$ind_corr = ifelse(dataset$corr < dataset$max_corr && dataset$corr > dataset$max_corr, 1, 0)
dataset_r = subset(dataset, dataset$corr < dataset$max_corr && dataset$corr > dataset$max_corr)
View(dataset_r)
# dataset$ind_corr = ifelse(dataset$corr < dataset$max_corr && dataset$corr > dataset$max_corr, 1, 0)
dataset_r = subset(dataset, dataset$corr < dataset$max_corr && dataset$corr > dataset$min_corr)
View(dataset_r)
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions_ce.R')
# setwd("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection")
# source('C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions.R')
# source('C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions_ce.R')
#########################################
# Preamble
#########################################
library(tidyverse)
library(tidyr)
library(plyr)
library(devtools)
install_github("CompARE-Composite/CompARE-package")
library(CompARE)
#########################################
# Define the set of scenarios
#########################################
# Scenarios
p0_e1 = c(0.1, 0.2)
p0_e2 = c(0.1, 0.2, 0.3)
OR1 = c(0.6, 0.7, 0.8, 0.9)
OR2 = c(0.65, 0.7, 0.8)
scenarios = expand_grid(p0_e1,p0_e2,OR1,OR2)
# Probabilities treat group
scenarios$p1_e1 = (scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1))/(1+(scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1)))
scenarios$p1_e2 = (scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2))/(1+(scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2)))
# Calculate the correlation bounds
scenarios$min_corr0 = mapply(lower_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$min_corr1 = mapply(lower_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$max_corr0 = mapply(upper_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$max_corr1 = mapply(upper_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$min_corr = pmax(scenarios$min_corr0,scenarios$min_corr1)
scenarios$max_corr = pmin(scenarios$max_corr0,scenarios$max_corr1)
corr = c(0, 0.2, 0.4, 0.6, 0.8)
dataset = expand_grid(scenarios, corr)
dataset = subset(dataset, dataset$corr < dataset$max_corr && dataset$corr > dataset$min_corr)
# Calculate CE Probabilities
dataset$p0_ce = mapply(prob_cbe, p_e1=dataset$p0_e1, p_e2=dataset$p0_e2, rho=dataset$corr)
dataset$p1_ce = mapply(prob_cbe, p_e1=dataset$p1_e1, p_e2=dataset$p1_e2, rho=dataset$corr)
dataset$OR_ce = (dataset$p1_ce/(1-dataset$p1_ce))/(dataset$p0_ce/(1-dataset$p0_ce))
# Calculate ARE
dataset$ARE = mapply(ARE_cbe, p0_e1=dataset$p0_e1, p0_e2=dataset$p0_e2, eff_e1=dataset$OR1, eff_e2=dataset$OR2, rho=dataset$corr)
dataset$decision = ifelse(dataset$ARE<1, "RE", "CE")
rm(OR1,OR2,p0_ce,p0_e1,p0_e2,scenarios,scenarios1,scenarios2,scenarios3)
View(dataset)
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions_ce.R')
library(tidyverse)
library(tidyr)
library(plyr)
library(devtools)
install_github("CompARE-Composite/CompARE-package")
library(CompARE)
# Scenarios
p0_e1 = c(0.1, 0.2)
p0_e2 = c(0.1, 0.2, 0.3)
OR1 = c(0.6, 0.7, 0.8, 0.9)
OR2 = c(0.65, 0.7, 0.8)
scenarios = expand_grid(p0_e1,p0_e2,OR1,OR2)
# Probabilities treat group
scenarios$p1_e1 = (scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1))/(1+(scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1)))
scenarios$p1_e2 = (scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2))/(1+(scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2)))
# Calculate the correlation bounds
scenarios$min_corr0 = mapply(lower_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$min_corr1 = mapply(lower_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$max_corr0 = mapply(upper_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$max_corr1 = mapply(upper_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$min_corr = pmax(scenarios$min_corr0,scenarios$min_corr1)
scenarios$max_corr = pmin(scenarios$max_corr0,scenarios$max_corr1)
corr = c(0, 0.2, 0.4, 0.6, 0.8)
dataset = expand_grid(scenarios, corr)
dataset = subset(dataset, dataset$corr < dataset$max_corr && dataset$corr > dataset$min_corr)
# Calculate CE Probabilities
dataset$p0_ce = mapply(prob_cbe, p_e1=dataset$p0_e1, p_e2=dataset$p0_e2, rho=dataset$corr)
dataset$corr
