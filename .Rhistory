setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection")
# setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/Functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions_ce.R')
View(f_sim)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
library(tidyr)
library(plyr)
library(devtools)
install_github("CompARE-Composite/CompARE-package")
library(CompARE)
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions_ce.R')
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_H0_True.RData")
# load("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_H0_True.RData")
knitr::opts_chunk$set(echo = FALSE)
p <- list()
enum = 1
i <- 4
it <-  dim(subset(dataset,dataset$scenario<i))+1
sub=subset(dataset,dataset$scenario==i)
p[[enum]] <-ggplot(sub, aes(x=corr, y=Test_Power_ES, color=as.factor(decision)))  +
geom_point(size=2)+ ggtitle(paste("Scenario 4 \n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (ES)", x="Correlation", color="Decision") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9),legend.position = c(0.8, 0.2))
p[[enum+1]] <-ggplot(sub, aes(x=corr, y=Test_Power_ES_ub, color=as.factor(decision)))  +
geom_point(size=2)+ ggtitle(paste("Scenario 4 \n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (ES, unblinded)", x="Correlation", color="Decision") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9),legend.position = c(0.8, 0.2))
p[[enum+2]] <-ggplot(sub, aes(x=corr, y=Test_Power_CE))  +
geom_point(size=2)+ ggtitle(paste("Scenario 4 \n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (CE)", x="Correlation", color="Decision") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9))
p[[enum+3]] <-ggplot(sub, aes(x=corr, y=Test_Power_RE))  +
geom_point(size=2)+ ggtitle(paste("Scenario 4 \n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (RE)", x="Correlation", color="Decision") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9))
stable <- data.frame(Corr=sub$corr,ARE=round(sub$ARE,2),"%CE"=round(100*sub$decision_ES,2),"%CE_u"=round(100*sub$decision_ES_ub,2),check.names=FALSE)
p[[enum+4]] <- ggtexttable(stable, rows = NULL, theme = ttheme(base_style = "default", base_size = 9))
enum=enum+5
#   it <- it + dim(subset(dataset,dataset$scenario==i))
# }
marrangeGrob(p,ncol=5,nrow=1,top=NULL)
i<- 4
i<- dataset[dim(subset(dataset,dataset$scenario<i))+1,]
estimation_b(samplesize=dataset$samplesize_e1[i]/2,
p0_e1=dataset$p0_e1[i],p1_e1=dataset$p1_e1[i],
OR1=dataset$OR1[i],
p0_e2=dataset$p0_e2[i],p1_e2=dataset$p1_e2[i],
OR2=dataset$OR2[i],
p0_ce=dataset$p0_ce[i],p1_ce=dataset$p1_ce[i])
i
estimation_b <- function(samplesize,p0_e1,p1_e1,OR1,p0_e2,p1_e2,OR2,p0_ce,p1_ce){
total_ss = samplesize*2
# control group
s1_group0 = p0_e1 + p0_e2 - p0_ce
s2_group0 = p0_ce-p0_e2
s3_group0 = p0_ce-p0_e1
s4_group0 = 1- p0_ce
sm0 = rmultinom(1,samplesize,c(s1_group0,s2_group0,s3_group0,s4_group0))
# intervention group
s1_group1 = p1_e1+p1_e2-p1_ce
s2_group1 = ifelse(p1_ce-p1_e2>0, p1_ce-p1_e2, 0)
s3_group1 = ifelse(p1_ce-p1_e1>0, p1_ce-p1_e1, 0)
s4_group1 = 1- p1_ce
sm1 = rmultinom(1,samplesize,c(s1_group1,s2_group1,s3_group1,s4_group1))
# pooled sample
sm = sm0 + sm1
# estimated probabilities
phat_e1 = (sm[1]+sm[2])/total_ss
phat_e2 = (sm[1]+sm[3])/total_ss
phat_ce = 1-(sm[4])/total_ss
#
phat0_e1 = fun_p0(p=phat_e1,l=OR1)
phat0_e2 = fun_p0(p=phat_e2,l=OR2)
#
phat1_e1 = (OR1*phat0_e1/(1-phat0_e1))/(1+(OR1*phat0_e1/(1-phat0_e1)))
phat1_e2 = (OR2*phat0_e2/(1-phat0_e2))/(1+(OR2*phat0_e2/(1-phat0_e2)))
# estimated correlation
corrhat =  (phat_ce - (samplesize/total_ss)*(1 - (1-phat0_e1)*(1-phat0_e2)) - (samplesize/total_ss)*(1-(1-phat1_e1)*(1-phat1_e2)))/(-sqrt(phat0_e1*phat0_e2*(1-phat0_e1)*(1-phat0_e2))-sqrt(phat1_e1*phat1_e2*(1-phat1_e1)*(1-phat1_e2)))
# correlation restrictions
update_uppcorr0=upper_corr(phat0_e1,phat0_e2)
# update_uppcorr1=upper_corr(phat1_e1,phat1_e2)
uppcorr0=upper_corr(p0_e1,p0_e2)
uppcorr1=upper_corr(p1_e1,p1_e2)
uppcorr12=upper_corr((OR1*phat0_e1/(1-phat0_e1))/(1+(OR1*phat0_e1/(1-phat0_e1))),
(OR2*phat0_e2/(1-phat0_e2))/(1+(OR2*phat0_e2/(1-phat0_e2))))
upp = min(update_uppcorr0,uppcorr0,uppcorr1,uppcorr12)
update_lowcorr0= lower_corr(phat0_e1,phat0_e2)
# update_lowcorr1=lower_corr(phat1_e1,phat1_e2)
lowcorr0= lower_corr(p0_e1,p0_e2)
lowcorr1=lower_corr(p1_e1,p1_e2)
lowcorr12=lower_corr((OR1*phat0_e1/(1-phat0_e1))/(1+(OR1*phat0_e1/(1-phat0_e1))),
(OR2*phat0_e2/(1-phat0_e2))/(1+(OR2*phat0_e2/(1-phat0_e2))))
low = max(update_lowcorr0,lowcorr0,lowcorr1,lowcorr12)
corrhat_c = corrhat
if(corrhat > upp){
corrhat_c = upp
}
if(corrhat < low){
corrhat_c = low
}
return(c(corrhat=corrhat,corrhat_c=corrhat_c,phat0_e1=phat0_e1,phat0_e2=phat0_e2))
}
estimation_b(samplesize=dataset$samplesize_e1[i]/2,
p0_e1=dataset$p0_e1[i],p1_e1=dataset$p1_e1[i],
OR1=dataset$OR1[i],
p0_e2=dataset$p0_e2[i],p1_e2=dataset$p1_e2[i],
OR2=dataset$OR2[i],
p0_ce=dataset$p0_ce[i],p1_ce=dataset$p1_ce[i])
samplesize=dataset$samplesize_e1[i]/2
samplesize=dataset$samplesize_e1[i]/2
i
i<- 4
i<- dim(subset(dataset,dataset$scenario<i))+5
# dataset[dim(subset(dataset,dataset$scenario<i))+1,]
samplesize=dataset$samplesize_e1[i]/2;
p0_e1=dataset$p0_e1[i];p1_e1=dataset$p1_e1[i];
OR1=dataset$OR1[i];
p0_e2=dataset$p0_e2[i];p1_e2=dataset$p1_e2[i];
OR2=dataset$OR2[i];
p0_ce=dataset$p0_ce[i];p1_ce=dataset$p1_ce[i]
total_ss = samplesize*2
# control group
s1_group0 = p0_e1 + p0_e2 - p0_ce
s2_group0 = p0_ce-p0_e2
s3_group0 = p0_ce-p0_e1
s4_group0 = 1- p0_ce
sm0 = rmultinom(1,samplesize,c(s1_group0,s2_group0,s3_group0,s4_group0))
# intervention group
s1_group1 = p1_e1+p1_e2-p1_ce
s2_group1 = ifelse(p1_ce-p1_e2>0, p1_ce-p1_e2, 0)
s3_group1 = ifelse(p1_ce-p1_e1>0, p1_ce-p1_e1, 0)
s4_group1 = 1- p1_ce
sm1 = rmultinom(1,samplesize,c(s1_group1,s2_group1,s3_group1,s4_group1))
# pooled sample
sm = sm0 + sm1
# estimated probabilities
phat_e1 = (sm[1]+sm[2])/total_ss
phat_e2 = (sm[1]+sm[3])/total_ss
phat_ce = 1-(sm[4])/total_ss
phat_e1
phat_e2 = (sm[1]+sm[3])/total_ss
phat_ce = 1-(sm[4])/total_ss
#
phat0_e1 = fun_p0(p=phat_e1,l=OR1)
phat0_e2 = fun_p0(p=phat_e2,l=OR2)
#
phat1_e1 = (OR1*phat0_e1/(1-phat0_e1))/(1+(OR1*phat0_e1/(1-phat0_e1)))
fun_p0
p=phat_e1
l=OR1
View(fun_p0)
p = p*2
sol1= -(1 + l + p - l*p + sqrt(4*(-1 + l)*p + (1 + l + p - l*p)^2))/(2*(-1 + l))
sol2= -(1 + l + p - l*p - sqrt(4*(-1 + l)*p + (1 + l + p - l*p)^2))/(2*(-1 + l))
sol1
sol2
p
# control group
s1_group0 = p0_e1 + p0_e2 - p0_ce
s2_group0 = p0_ce-p0_e2
s3_group0 = p0_ce-p0_e1
s4_group0 = 1- p0_ce
sm0 = rmultinom(1,samplesize,c(s1_group0,s2_group0,s3_group0,s4_group0))
# intervention group
s1_group1 = p1_e1+p1_e2-p1_ce
s2_group1 = ifelse(p1_ce-p1_e2>0, p1_ce-p1_e2, 0)
s3_group1 = ifelse(p1_ce-p1_e1>0, p1_ce-p1_e1, 0)
s4_group1 = 1- p1_ce
sm1 = rmultinom(1,samplesize,c(s1_group1,s2_group1,s3_group1,s4_group1))
# pooled sample
sm = sm0 + sm1
# estimated probabilities
phat_e1 = (sm[1]+sm[2])/total_ss
phat_e1
(sm[1]+sm[2])/total_ss
sm1
sm
sm[1]
sm[2]
(sm[1]+sm[2])
(sm[1]+sm[2])/total_ss
# for(j in 1:nsim){
total_ss = samplesize*2
sm0 = f_sim(samplesize=samplesize,p_e1=p0_e1,p_e2=p0_e2,p_ce=p0_ce)
sm1 = f_sim(samplesize=samplesize,p_e1=p1_e1,p_e2=p1_e2,p_ce=p1_ce)
# pooled sample
sm = sm0 + sm1
# estimated probabilities
phat0_e1 = (sm0[1]+sm0[2])/samplesize
phat0_e2 = (sm0[1]+sm0[3])/samplesize
phat0_ce = 1-(sm0[4])/samplesize
phat1_e1 = (sm1[1]+sm1[2])/samplesize
phat1_e2 = (sm1[1]+sm1[3])/samplesize
phat1_ce = 1-(sm1[4])/samplesize
phat1_e1
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/Functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/sim_functions_ce.R')
library(tidyverse)
library(tidyr)
library(plyr)
library(devtools)
install_github("CompARE-Composite/CompARE-package")
library(CompARE)
load("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_H0_True.RData")
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_H0_True.RData")
i=1
samplesize=dataset$samplesize_e1[i]/2;
p0_e1=dataset$p0_e1[i];p1_e1=dataset$p1_e1[i];
OR1=dataset$OR1[i];
p0_e2=dataset$p0_e2[i];p1_e2=dataset$p1_e2[i];
OR2=dataset$OR2[i];
p0_ce=dataset$p0_ce[i];p1_ce=dataset$p1_ce[i];
upp=dataset$max_corr[i];low=dataset$min_corr[i]
total_ss = samplesize*2
# control group
s1_group0 = p0_e1 + p0_e2 - p0_ce
s2_group0 = p0_ce-p0_e2
s3_group0 = p0_ce-p0_e1
s4_group0 = 1- p0_ce
sm0 = rmultinom(1,samplesize,c(s1_group0,s2_group0,s3_group0,s4_group0))
# intervention group
s1_group1 = p1_e1+p1_e2-p1_ce
s2_group1 = ifelse(p1_ce-p1_e2>0, p1_ce-p1_e2, 0)
s3_group1 = ifelse(p1_ce-p1_e1>0, p1_ce-p1_e1, 0)
s4_group1 = 1- p1_ce
sm1 = rmultinom(1,samplesize,c(s1_group1,s2_group1,s3_group1,s4_group1))
# pooled sample
sm = sm0 + sm1
# estimated probabilities
phat_e1 = (sm[1]+sm[2])/total_ss
phat_e2 = (sm[1]+sm[3])/total_ss
phat_ce = 1-(sm[4])/total_ss
phat_e1
# estimated probabilities
phat_e1 = (sm[1]+sm[2])/total_ss
phat_e2 = (sm[1]+sm[3])/total_ss
phat_ce = 1-(sm[4])/total_ss
#
phat0_e1 = fun_p0(p=phat_e1,l=OR1)
phat0_e2 = fun_p0(p=phat_e2,l=OR2)
#
phat1_e1 = (OR1*phat0_e1/(1-phat0_e1))/(1+(OR1*phat0_e1/(1-phat0_e1)))
phat1_e2 = (OR2*phat0_e2/(1-phat0_e2))/(1+(OR2*phat0_e2/(1-phat0_e2)))
# estimated correlation
corrhat =  (phat_ce - (samplesize/total_ss)*(1 - (1-phat0_e1)*(1-phat0_e2)) - (samplesize/total_ss)*(1-(1-phat1_e1)*(1-phat1_e2)))/(-sqrt(phat0_e1*phat0_e2*(1-phat0_e1)*(1-phat0_e2))-sqrt(phat1_e1*phat1_e2*(1-phat1_e1)*(1-phat1_e2)))
# correlation restrictions
update_uppcorr0=upper_corr(phat0_e1,phat0_e2)
# update_uppcorr1=upper_corr(phat1_e1,phat1_e2)
uppcorr0=upper_corr(p0_e1,p0_e2)
uppcorr1=upper_corr(p1_e1,p1_e2)
uppcorr12=upper_corr((OR1*phat0_e1/(1-phat0_e1))/(1+(OR1*phat0_e1/(1-phat0_e1))),
(OR2*phat0_e2/(1-phat0_e2))/(1+(OR2*phat0_e2/(1-phat0_e2))))
upp = min(update_uppcorr0,uppcorr0,uppcorr1,uppcorr12)
update_lowcorr0= lower_corr(phat0_e1,phat0_e2)
# update_lowcorr1=lower_corr(phat1_e1,phat1_e2)
lowcorr0= lower_corr(p0_e1,p0_e2)
lowcorr1=lower_corr(p1_e1,p1_e2)
lowcorr12=lower_corr((OR1*phat0_e1/(1-phat0_e1))/(1+(OR1*phat0_e1/(1-phat0_e1))),
(OR2*phat0_e2/(1-phat0_e2))/(1+(OR2*phat0_e2/(1-phat0_e2))))
low = max(update_lowcorr0,lowcorr0,lowcorr1,lowcorr12)
corrhat_c = corrhat
corrhat
corrhat_c
# samplesize=dataset$samplesize_e1[i]/2;
# p0_e1=dataset$p0_e1[i];p1_e1=dataset$p1_e1[i];
# OR1=dataset$OR1[i];
# p0_e2=dataset$p0_e2[i];p1_e2=dataset$p1_e2[i];
# OR2=dataset$OR2[i];
# p0_ce=dataset$p0_ce[i];p1_ce=dataset$p1_ce[i];
# # upp=dataset$max_corr[i];low=dataset$min_corr[i]
#
#
#
estimation_ub(samplesize=dataset$samplesize_e1[i]/2,
p0_e1=dataset$p0_e1[i],p1_e1=dataset$p1_e1[i],
OR1=dataset$OR1[i],
p0_e2=dataset$p0_e2[i],p1_e2=dataset$p1_e2[i],
OR2=dataset$OR2[i],
p0_ce=dataset$p0_ce[i],p1_ce=dataset$p0_ce[i],
upp=dataset$max_corr[i],low=dataset$min_corr[i])
# samplesize=dataset$samplesize_e1[i]/2;
# p0_e1=dataset$p0_e1[i];p1_e1=dataset$p1_e1[i];
# OR1=dataset$OR1[i];
# p0_e2=dataset$p0_e2[i];p1_e2=dataset$p1_e2[i];
# OR2=dataset$OR2[i];
# p0_ce=dataset$p0_ce[i];p1_ce=dataset$p1_ce[i];
# # upp=dataset$max_corr[i];low=dataset$min_corr[i]
#
#
#
estimation_ub(samplesize=dataset$samplesize_e1[i]/2,
p0_e1=dataset$p0_e1[i],p1_e1=dataset$p1_e1[i],
OR1=dataset$OR1[i],
p0_e2=dataset$p0_e2[i],p1_e2=dataset$p1_e2[i],
OR2=dataset$OR2[i],
p0_ce=dataset$p0_ce[i],p1_ce=dataset$p0_ce[i])
# samplesize=dataset$samplesize_e1[i]/2;
# p0_e1=dataset$p0_e1[i];p1_e1=dataset$p1_e1[i];
# OR1=dataset$OR1[i];
# p0_e2=dataset$p0_e2[i];p1_e2=dataset$p1_e2[i];
# OR2=dataset$OR2[i];
# p0_ce=dataset$p0_ce[i];p1_ce=dataset$p1_ce[i];
# # upp=dataset$max_corr[i];low=dataset$min_corr[i]
#
#
#
estimation_ub(samplesize=dataset$samplesize_e1[i]/2,
p0_e1=dataset$p0_e1[i],p1_e1=dataset$p1_e1[i],
OR1=dataset$OR1[i],
p0_e2=dataset$p0_e2[i],p1_e2=dataset$p1_e2[i],
OR2=dataset$OR2[i],
p0_ce=dataset$p0_ce[i],p1_ce=dataset$p0_ce[i])
# samplesize=dataset$samplesize_e1[i]/2;
# p0_e1=dataset$p0_e1[i];p1_e1=dataset$p1_e1[i];
# OR1=dataset$OR1[i];
# p0_e2=dataset$p0_e2[i];p1_e2=dataset$p1_e2[i];
# OR2=dataset$OR2[i];
# p0_ce=dataset$p0_ce[i];p1_ce=dataset$p1_ce[i];
# # upp=dataset$max_corr[i];low=dataset$min_corr[i]
#
#
#
estimation_ub(samplesize=dataset$samplesize_e1[i]/2,
p0_e1=dataset$p0_e1[i],p1_e1=dataset$p1_e1[i],
OR1=dataset$OR1[i],
p0_e2=dataset$p0_e2[i],p1_e2=dataset$p1_e2[i],
OR2=dataset$OR2[i],
p0_ce=dataset$p0_ce[i],p1_ce=dataset$p0_ce[i])
# samplesize=dataset$samplesize_e1[i]/2;
# p0_e1=dataset$p0_e1[i];p1_e1=dataset$p1_e1[i];
# OR1=dataset$OR1[i];
# p0_e2=dataset$p0_e2[i];p1_e2=dataset$p1_e2[i];
# OR2=dataset$OR2[i];
# p0_ce=dataset$p0_ce[i];p1_ce=dataset$p1_ce[i];
# # upp=dataset$max_corr[i];low=dataset$min_corr[i]
#
#
#
estimation_b(samplesize=dataset$samplesize_e1[i]/2,
p0_e1=dataset$p0_e1[i],p1_e1=dataset$p1_e1[i],
OR1=dataset$OR1[i],
p0_e2=dataset$p0_e2[i],p1_e2=dataset$p1_e2[i],
OR2=dataset$OR2[i],
p0_ce=dataset$p0_ce[i],p1_ce=dataset$p0_ce[i])
View(dataset)
View(dataset)
