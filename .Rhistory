dataset_H0False = dataset
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_H0False_withoutss_new.RData")
dataset_H0False_ss = dataset
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/scenarios.RData")
dataset_H0False$scenario = dataset$scenario
dataset_H0False_ss$scenario = dataset$scenario
dataset=dataset_H0False
rm(dataset_H0False)
# load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_bias.RData")
# dataset_ARE= dataset
# load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_SS.RData")
# dataset_SS= dataset
# load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_SS_H0True.RData")
# dataset_SSh0= dataset
#
# dataset = data.frame(dataset_ARE,dataset_SS[,21:27],dataset_SSh0[,24:25])
knitr::opts_chunk$set(echo = TRUE)
dataset$diff_powers = dataset$Test_Power_CE - dataset$Test_Power_RE
ggplot(dataset, aes(x=ARE, y=diff_powers, color=as.factor(decision))) + geom_point(size=2) + labs(y = "Difference in power (Power CE - Power RE)", x="ARE", color="Decision")
dataset$gain_power = ifelse(dataset$diff_powers>0, "CE", "RE")
dataset$gain_power = as.factor(dataset$gain_power)
dataset$decision = as.factor(dataset$decision)
summary(subset(dataset,dataset$gain_power != dataset$decision)[,c(3,4,18,19,20,21,22)])
subd=dataset#subset(dataset,is.na(dataset$Test_Power_ES_ub)==F)
power_data <- data.frame(Power=c(dataset$Test_Power_ES,dataset$Test_Power_ES_ub,dataset$Test_Power_CE,dataset$Test_Power_RE),
Endpoint=c(rep("SE",length(dataset$Test_Power_ES)),
rep("SE_ub",length(dataset$Test_Power_ES_ub)),
rep("CE",length(dataset$Test_Power_CE)),
rep("RE",length(dataset$Test_Power_RE)))
)
ggplot(power_data, aes(x=Endpoint, y=Power)) + geom_boxplot()
p <- list()
enum = 1
it <- 1
for(i in 1:max(dataset$scenario)){
sub=subset(dataset,dataset$scenario==i & dataset$p_init==1.0)
#
p[[enum]] <-ggplot(sub, aes(x=corr, y=Test_Power_ES, color=as.factor(decision)))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (ES)", x="Correlation", color="Decision") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9),legend.position = c(0.8, 0.2))
p[[enum+1]] <-ggplot(sub, aes(x=corr, y=Test_Power_ES_ub, color=as.factor(decision)))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (ES, unblinded)", x="Correlation", color="Decision") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9),legend.position = c(0.8, 0.2))
#
p[[enum+2]] <-ggplot(sub, aes(x=corr, y=Test_Power_ES_SS, color=as.factor(ss_decision)))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (ES)", x="Correlation", color="Decision SS") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9),legend.position = c(0.8, 0.2))
p[[enum+3]] <-ggplot(sub, aes(x=corr, y=Test_Power_ES_ubSS, color=as.factor(ss_decision)))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (ES, unblinded)", x="Correlation", color="Decision SS") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9),legend.position = c(0.8, 0.2))
#
p[[enum+4]] <-ggplot(sub, aes(x=corr, y=Test_Power_CE))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (CE)", x="Correlation", color="Decision") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9))
p[[enum+5]] <-ggplot(sub, aes(x=corr, y=Test_Power_RE))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (RE)", x="Correlation", color="Decision") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9))
stable <- data.frame(Corr=sub$corr,
ARE=round(sub$ARE,2),"%CE"=round(100*sub$decision_ES,2),
"%CE_u"=round(100*sub$decision_ES_ub,2),check.names=FALSE)
p[[enum+6]] <- ggtexttable(stable, rows = NULL, theme = ttheme(base_style = "default", base_size = 9))
stable <- data.frame(Corr=sub$corr,
SS=round(sub$ss_ratio,2),"%CE"=round(100*sub$decision_ES_SS,2),
"%CE_u"=round(100*sub$decision_ES_ubSS,2),check.names=FALSE)
p[[enum+7]] <- ggtexttable(stable, rows = NULL, theme = ttheme(base_style = "default", base_size = 9))
enum=enum+8
it <- it + dim(subset(dataset,dataset$scenario==i))
}
marrangeGrob(p,ncol=4,nrow=1,top=NULL)
# ,heights = c(5, 10)
p <- list()
enum = 1
it <- 1
for(i in 1:max(dataset$scenario)){
sub=subset(dataset,dataset$scenario==i & dataset$p_init==0.5)
#
p[[enum]] <-ggplot(sub, aes(x=corr, y=Test_Power_ES, color=as.factor(decision)))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (ES)", x="Correlation", color="Decision") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9),legend.position = c(0.8, 0.2))
p[[enum+1]] <-ggplot(sub, aes(x=corr, y=Test_Power_ES_ub, color=as.factor(decision)))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (ES, unblinded)", x="Correlation", color="Decision") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9),legend.position = c(0.8, 0.2))
#
p[[enum+2]] <-ggplot(sub, aes(x=corr, y=Test_Power_ES_SS, color=as.factor(ss_decision)))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (ES)", x="Correlation", color="Decision SS") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9),legend.position = c(0.8, 0.2))
p[[enum+3]] <-ggplot(sub, aes(x=corr, y=Test_Power_ES_ubSS, color=as.factor(ss_decision)))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (ES, unblinded)", x="Correlation", color="Decision SS") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9),legend.position = c(0.8, 0.2))
#
p[[enum+4]] <-ggplot(sub, aes(x=corr, y=Test_Power_CE))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (CE)", x="Correlation", color="Decision") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9))
p[[enum+5]] <-ggplot(sub, aes(x=corr, y=Test_Power_RE))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset$p0_e1[it],",",dataset$p0_e2[it],",",dataset$OR1[it],",",dataset$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (RE)", x="Correlation", color="Decision") + coord_cartesian(ylim = c(0.60, 1))+ geom_path()+ theme(plot.title = element_text(size=9))
stable <- data.frame(Corr=sub$corr,
ARE=round(sub$ARE,2),"%CE"=round(100*sub$decision_ES,2),
"%CE_u"=round(100*sub$decision_ES_ub,2),check.names=FALSE)
p[[enum+6]] <- ggtexttable(stable, rows = NULL, theme = ttheme(base_style = "default", base_size = 9))
stable <- data.frame(Corr=sub$corr,
SS=round(sub$ss_ratio,2),"%CE"=round(100*sub$decision_ES_SS,2),
"%CE_u"=round(100*sub$decision_ES_ubSS,2),check.names=FALSE)
p[[enum+7]] <- ggtexttable(stable, rows = NULL, theme = ttheme(base_style = "default", base_size = 9))
enum=enum+8
it <- it + dim(subset(dataset,dataset$scenario==i))
}
marrangeGrob(p,ncol=4,nrow=1,top=NULL)
# ,heights = c(5, 10)
p <- list()
enum = 1
it <- 1
for(i in 1:max(dataset_SSadd$scenario)){
sub=subset(dataset_SSadd,dataset_SSadd$scenario==i & dataset_SSadd$p_init==1.0)
p[[enum]] <-ggplot(sub, aes(x=corr, y=Test_Power_ES_SS, color=as.factor(ss_decision)))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset_SSadd$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset_SSadd$p0_e1[it],",",dataset_SSadd$p0_e2[it],",",dataset_SSadd$OR1[it],",",dataset_SSadd$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (ES)", x="Correlation", color="Decision SS") + coord_cartesian(ylim = c(0, 1))+ geom_path()+ theme(plot.title = element_text(size=9),legend.position = c(0.8, 0.2))
p[[enum+1]] <-ggplot(sub, aes(x=corr, y=Test_Power_ES_ubSS, color=as.factor(ss_decision)))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset_SSadd$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset_SSadd$p0_e1[it],",",dataset_SSadd$p0_e2[it],",",dataset_SSadd$OR1[it],",",dataset_SSadd$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (ES, unblinded)", x="Correlation", color="Decision SS") + coord_cartesian(ylim = c(0, 1))+ geom_path()+ theme(plot.title = element_text(size=9),legend.position = c(0.8, 0.2))
stable <- data.frame(Corr=sub$corr,
SS=round(sub$ss_ratio,2),"%CE"=round(100*sub$decision_ES_SS,2),
"%CE_u"=round(100*sub$decision_ES_ubSS,2),check.names=FALSE)
p[[enum+2]] <- ggtexttable(stable, rows = NULL, theme = ttheme(base_style = "default", base_size = 9))
enum=enum+3
it <- it + dim(subset(dataset_SSadd,dataset_SSadd$scenario==i))
}
marrangeGrob(p,ncol=3,nrow=1,top=NULL)
p <- list()
enum = 1
it <- 1
for(i in 1:max(dataset_SSadd$scenario)){
sub=subset(dataset_SSadd,dataset_SSadd$scenario==i & dataset_SSadd$p_init==0.5)
p[[enum]] <-ggplot(sub, aes(x=corr, y=Test_Power_ES_SS, color=as.factor(ss_decision)))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset_SSadd$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset_SSadd$p0_e1[it],",",dataset_SSadd$p0_e2[it],",",dataset_SSadd$OR1[it],",",dataset_SSadd$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (ES)", x="Correlation", color="Decision SS") + coord_cartesian(ylim = c(0, 1))+ geom_path()+ theme(plot.title = element_text(size=9),legend.position = c(0.8, 0.2))
p[[enum+1]] <-ggplot(sub, aes(x=corr, y=Test_Power_ES_ubSS, color=as.factor(ss_decision)))  +
geom_point(size=2)+ ggtitle(paste("Scenario", dataset_SSadd$scenario[it], "\n (p1,p2,OR1,OR2) \n=(", dataset_SSadd$p0_e1[it],",",dataset_SSadd$p0_e2[it],",",dataset_SSadd$OR1[it],",",dataset_SSadd$OR2[it],")"))+geom_point(size=2)  + labs(y = "Empirical Power (ES, unblinded)", x="Correlation", color="Decision SS") + coord_cartesian(ylim = c(0, 1))+ geom_path()+ theme(plot.title = element_text(size=9),legend.position = c(0.8, 0.2))
stable <- data.frame(Corr=sub$corr,
SS=round(sub$ss_ratio,2),"%CE"=round(100*sub$decision_ES_SS,2),
"%CE_u"=round(100*sub$decision_ES_ubSS,2),check.names=FALSE)
p[[enum+2]] <- ggtexttable(stable, rows = NULL, theme = ttheme(base_style = "default", base_size = 9))
enum=enum+3
it <- it + dim(subset(dataset_SSadd,dataset_SSadd$scenario==i))
}
marrangeGrob(p,ncol=3,nrow=1,top=NULL)
signlevel_data <- data.frame(signlevel=c(dataset_H0True$Test_Reject_ES,
dataset_H0True$Test_Reject_ES_ub,
dataset_H0True$Test_Reject_ES_SS,
dataset_H0True$Test_Reject_ES_ubSS,
dataset_H0True$Test_Reject_CE,dataset_H0True$Test_Reject_RE),
Endpoint=c(rep("SE",length(dataset_H0True$Test_Reject_ES)),
rep("SE(ub)",length(dataset_H0True$Test_Reject_ES_ub)),
rep("SE (ss/b)",length(dataset_H0True$Test_Reject_ES_SS)),
rep("SE (ss/ub)",length(dataset_H0True$Test_Reject_ES_ubSS)),
rep("CE",length(dataset_H0True$Test_Reject_CE)),
rep("RE",length(dataset_H0True$Test_Reject_RE)))
)
ggplot(signlevel_data, aes(x=Endpoint, y=signlevel)) + geom_boxplot()
subset_h0 <- data.frame(Test_Reject_ES=dataset_H0True$Test_Reject_ES,
Test_Reject_ES_ub=dataset_H0True$Test_Reject_ES_ub,
Test_Reject_ES_SS=dataset_H0True$Test_Reject_ES_SS,
Test_Reject_ES_ubSS=dataset_H0True$Test_Reject_ES_ubSS,
Test_Reject_CE=dataset_H0True$Test_Reject_CE,
Test_Reject_RE=dataset_H0True$Test_Reject_RE
)
summary(subset_h0)
summary(subset(dataset_H0True,dataset_H0True$Test_Reject_ES_ubSS>0.055)[,1:5])
summary(subset(dataset_H0True,dataset_H0True$Test_Reject_ES_ubSS>0.055)[,1:5,13])
summary(subset(dataset_H0True,dataset_H0True$Test_Reject_ES_ubSS>0.055)[,1:5,13])
summary(subset(dataset_H0True,dataset_H0True$Test_Reject_ES_ubSS>0.055)[,1,13])
summary(subset(dataset_H0True,dataset_H0True$Test_Reject_ES_ubSS>0.055)[,c(1:5,13)])
summary(subset(dataset_H0True,dataset_H0True$Test_Reject_ES_ubSS>0.055)[,c(1:5,15)])
summary(subset(dataset_H0True,dataset_H0True$Test_Reject_ES_ubSS>0.055)[,c(1:5,15,16,18,19,22)])
summary(subset(dataset_H0True,dataset_H0True$Test_Reject_ES_ubSS>0.055)[,c(1:5,15,16,18,19,23)])
summary(subset(dataset_H0True,dataset_H0True$Test_Reject_ES_ubSS>0.055)[,c(21,22)])
head(sub)
sub$decision
summary(dataset_H0False[,c(21,22)])
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(tidyverse)
rm(list = ls())
# Datasets
# Under H0
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_H0True.RData")
dataset_H0True = dataset
names(dataset_H0True)[names(dataset_H0True)=="Test_Power_ES"] <- 'Test_Reject_ES'
names(dataset_H0True)[names(dataset_H0True)=="Test_Power_ES_SS"] <- 'Test_Reject_ES_SS'
names(dataset_H0True)[names(dataset_H0True)=="Test_Power_ES_ub"] <- 'Test_Reject_ES_ub'
names(dataset_H0True)[names(dataset_H0True)=="Test_Power_ES_ubSS"] <- 'Test_Reject_ES_ubSS'
names(dataset_H0True)[names(dataset_H0True)=="Test_Power_CE"] <- 'Test_Reject_CE'
names(dataset_H0True)[names(dataset_H0True)=="Test_Power_RE"] <- 'Test_Reject_RE'
# load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_H0True_e1.RData")
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_H0True_e2.RData")
dataset_SSadd=dataset
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_H0False_withoutss_new.RData")
# load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_H0False.RData")
dataset_H0False = dataset
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_H0False_withss_new.RData")
dataset_H0False_ss = dataset
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/scenarios.RData")
dataset_H0False$scenario = dataset$scenario
dataset_H0False_ss$scenario = dataset$scenario
# dataset=dataset_H0False
rm(dataset)
# load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_bias.RData")
# dataset_ARE= dataset
# load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_SS.RData")
# dataset_SS= dataset
# load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_SS_H0True.RData")
# dataset_SSh0= dataset
#
# dataset = data.frame(dataset_ARE,dataset_SS[,21:27],dataset_SSh0[,24:25])
knitr::opts_chunk$set(echo = TRUE)
summary(dataset_H0False[,c(21,22)])
data.frame(Power=c(dataset_H0False$Test_Power_ES,dataset_H0False$Test_Power_ES_ub,
dataset_H0False$Test_Power_CE,dataset_H0False$Test_Power_RE),
Endpoint=c(rep("SE",length(dataset_H0False$Test_Power_ES)),
rep("SE_ub",length(dataset_H0False$Test_Power_ES_ub)),
rep("CE",length(dataset_H0False$Test_Power_CE)),
rep("RE",length(dataset_H0False$Test_Power_RE)))
)
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/aux_functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselect.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselectsim.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselect_ub.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselectsim_ub.R')
################################################
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/aux_functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselect.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselectsim.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselect_ub.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselectsim_ub.R')
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/aux_functions.R')
# - consider less scenarios for OR2, p1, p2
# - add scenarios correlation between components
# - computation sample size according to E1
# - adding interim analysis and sample size recalculation
#########################################
# Preamble
#########################################
library(tidyverse)
library(tidyr)
library(plyr)
library(devtools)
install_github("CompARE-Composite/CompARE-package")
# install_github("MartaBofillRoig/CBE_selection/eselect")
library(CompARE)
library(ggplot2)
library(gridExtra)
library(ggpubr)
#########################################
# Define the set of scenarios
#########################################
# Scenarios
p0_e1 = c(0.1, 0.2)
p0_e2 = c(0.1, 0.25)
OR1 = c(0.6, 0.8) #old_version c(0.6, 0.7, 0.8)
OR2 = c(0.75, 0.8)
p_init = c(0.5, 1)
# scenarios = expand_grid(p0_e1,p0_e2,OR1,OR2,p_init)
# scenarios$scenario = 1:dim(scenarios)[1]
scenarios = expand_grid(p0_e1,p0_e2,OR1,OR2)
scenarios$scenario = 1:dim(scenarios)[1]
scenarios = expand_grid(scenarios,p_init)
# Probabilities treat group
scenarios$p1_e1 = (scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1))/(1+(scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1)))
scenarios$p1_e2 = (scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2))/(1+(scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2)))
# Calculate the correlation bounds
scenarios$min_corr0 = mapply(lower_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$min_corr1 = mapply(lower_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$max_corr0 = mapply(upper_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$max_corr1 = mapply(upper_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$min_corr = pmax(scenarios$min_corr0,scenarios$min_corr1)
scenarios$max_corr = pmin(scenarios$max_corr0,scenarios$max_corr1)
corr = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)
dataset = expand_grid(scenarios, corr)
dataset = subset(dataset, dataset$corr < dataset$max_corr & dataset$corr > dataset$min_corr)
# save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/scenarios.RData")
# Calculate CE Probabilities
dataset$p0_ce = mapply(prob_cbe, p_e1=dataset$p0_e1, p_e2=dataset$p0_e2, rho=dataset$corr)
dataset$p1_ce = mapply(prob_cbe, p_e1=dataset$p1_e1, p_e2=dataset$p1_e2, rho=dataset$corr)
dataset$OR_ce = (dataset$p1_ce/(1-dataset$p1_ce))/(dataset$p0_ce/(1-dataset$p0_ce))
# Calculate ARE
dataset$ARE = mapply(ARE_cbe, p0_e1=dataset$p0_e1, p0_e2=dataset$p0_e2, eff_e1=dataset$OR1, eff_e2=dataset$OR2, rho=dataset$corr)
dataset$decision = ifelse(dataset$ARE<1, "RE", "CE")
# Calculate Sample size (total sample size, n=2*n0=2*n1)
alpha=0.05; beta=0.2
dataset$samplesize_e1 = mapply(samplesize_OR,p0=dataset$p0_e1, OR=dataset$OR1, alpha=alpha, beta=beta)
dataset$samplesize_ce = mapply(samplesize_OR,p0=dataset$p0_ce, OR=dataset$OR_ce, alpha=alpha, beta=beta)
dataset$ss_ratio = dataset$samplesize_e1/dataset$samplesize_ce
dataset$ss_decision = ifelse(dataset$ss_ratio<1, "RE", "CE")
# clean
rm(OR1,OR2,p0_e1,p0_e2,corr,p_init,scenarios)
# Vector empirical powers and significance level
dataset$Test_Power_CE <- NA
dataset$Test_Power_RE <- NA
# blinded
dataset$Test_Power_ES <- NA
dataset$decision_ES <- NA
dataset$Test_Power_ES_SS <- NA
dataset$decision_ES_SS <- NA
# unblinded
dataset$Test_Power_ES_ub <- NA
dataset$decision_ES_ub <- NA
dataset$Test_Power_ES_ubSS <- NA
dataset$decision_ES_ubSS  <- NA
# Empirical alpha
dataset$Test_Reject_CE <- NA
dataset$Test_Reject_RE <- NA
dataset$Test_Reject_ES <- NA
dataset$Test_Reject_ES_ub <- NA
#########################################
# General Settings Simulations
#########################################
set.seed(2367)
# nsim: number of simulations
# nsim = 100000
nsim = 1000#test
# type i and ii errors
z.alpha <- qnorm(1-alpha,0,1)
z.beta <-  qnorm(1-beta,0,1)
#########################################
# Bias correlation
#########################################
# set.seed(42)
# nsim: number of simulations
nsim = 1000
t0=Sys.time()
corr_est_ub_mean <- c()
corr_est_ub_v <- c()
corr_est_b_mean <- c()
corr_est_b_v <- c()
for(i in 1:dim(dataset)[1]){
v_ub <- replicate(nsim, estimation_ub(samplesize=dataset$samplesize_e1[i]/2,
p0_e1=dataset$p0_e1[i],p1_e1=dataset$p1_e1[i],
OR1=dataset$OR1[i],
p0_e2=dataset$p0_e2[i],p1_e2=dataset$p1_e2[i],
OR2=dataset$OR2[i],
p0_ce=dataset$p0_ce[i],p1_ce=dataset$p1_ce[i])[1])
corr_est_ub_mean[i] <- mean(v_ub)
corr_est_ub_v[i] <- var(v_ub)
v_b <- replicate(nsim, estimation_b(samplesize=dataset$samplesize_e1[i]/2,
p0_e1=dataset$p0_e1[i],p1_e1=dataset$p1_e1[i],
OR1=dataset$OR1[i],
p0_e2=dataset$p0_e2[i],p1_e2=dataset$p1_e2[i],
OR2=dataset$OR2[i],
p0_ce=dataset$p0_ce[i],p1_ce=dataset$p1_ce[i])[1])
corr_est_b_mean[i] <- mean(v_b)
corr_est_b_v[i] <- var(v_b)
print(i)
}
dataset$corr_est_ub_mean <- corr_est_ub_mean
dataset$corr_est_ub_v <- corr_est_ub_v
dataset$corr_est_b_mean <- corr_est_b_mean
dataset$corr_est_b_v <- corr_est_b_v
dataset$biased_ub <- dataset$corr_est_ub_mean - dataset$corr
dataset$biased_b <- dataset$corr_est_b_mean - dataset$corr
summary(dataset)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_bias.RData")
##################################################################################
# Research project Vienna - Bcn
# Endpoint selection and sample size reassessment for composite binary endpoints
# Simulation study
##################################################################################
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/aux_functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselect.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselectsim.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselect_ub.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselectsim_ub.R')
##################################################################################
# Differences with respect to previous versions
##################################################################################
# - consider less scenarios for OR2, p1, p2
# - add scenarios correlation between components
# - computation sample size according to E1
# - adding interim analysis and sample size recalculation
#########################################
# Preamble
#########################################
library(tidyverse)
library(tidyr)
library(plyr)
library(devtools)
install_github("CompARE-Composite/CompARE-package")
# install_github("MartaBofillRoig/CBE_selection/eselect")
library(CompARE)
library(ggplot2)
library(gridExtra)
library(ggpubr)
#########################################
# Define the set of scenarios
#########################################
# Scenarios
p0_e1 = c(0.1, 0.2)
p0_e2 = c(0.1, 0.25)
OR1 = c(0.6, 0.8) #old_version c(0.6, 0.7, 0.8)
OR2 = c(0.75, 0.8)
p_init = c(0.5, 1)
# scenarios = expand_grid(p0_e1,p0_e2,OR1,OR2,p_init)
# scenarios$scenario = 1:dim(scenarios)[1]
scenarios = expand_grid(p0_e1,p0_e2,OR1,OR2)
scenarios$scenario = 1:dim(scenarios)[1]
scenarios = expand_grid(scenarios,p_init)
# Probabilities treat group
scenarios$p1_e1 = (scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1))/(1+(scenarios$OR1*scenarios$p0_e1/(1-scenarios$p0_e1)))
scenarios$p1_e2 = (scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2))/(1+(scenarios$OR2*scenarios$p0_e2/(1-scenarios$p0_e2)))
# Calculate the correlation bounds
scenarios$min_corr0 = mapply(lower_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$min_corr1 = mapply(lower_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$max_corr0 = mapply(upper_corr,scenarios$p0_e1,scenarios$p0_e2)
scenarios$max_corr1 = mapply(upper_corr,scenarios$p1_e1,scenarios$p1_e2)
scenarios$min_corr = pmax(scenarios$min_corr0,scenarios$min_corr1)
scenarios$max_corr = pmin(scenarios$max_corr0,scenarios$max_corr1)
corr = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)
dataset = expand_grid(scenarios, corr)
dataset = subset(dataset, dataset$corr < dataset$max_corr & dataset$corr > dataset$min_corr)
# save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/scenarios.RData")
# Calculate CE Probabilities
dataset$p0_ce = mapply(prob_cbe, p_e1=dataset$p0_e1, p_e2=dataset$p0_e2, rho=dataset$corr)
dataset$p1_ce = mapply(prob_cbe, p_e1=dataset$p1_e1, p_e2=dataset$p1_e2, rho=dataset$corr)
dataset$OR_ce = (dataset$p1_ce/(1-dataset$p1_ce))/(dataset$p0_ce/(1-dataset$p0_ce))
# Calculate ARE
dataset$ARE = mapply(ARE_cbe, p0_e1=dataset$p0_e1, p0_e2=dataset$p0_e2, eff_e1=dataset$OR1, eff_e2=dataset$OR2, rho=dataset$corr)
dataset$decision = ifelse(dataset$ARE<1, "RE", "CE")
# Calculate Sample size (total sample size, n=2*n0=2*n1)
alpha=0.05; beta=0.2
dataset$samplesize_e1 = mapply(samplesize_OR,p0=dataset$p0_e1, OR=dataset$OR1, alpha=alpha, beta=beta)
dataset$samplesize_ce = mapply(samplesize_OR,p0=dataset$p0_ce, OR=dataset$OR_ce, alpha=alpha, beta=beta)
dataset$ss_ratio = dataset$samplesize_e1/dataset$samplesize_ce
dataset$ss_decision = ifelse(dataset$ss_ratio<1, "RE", "CE")
# clean
rm(OR1,OR2,p0_e1,p0_e2,corr,p_init,scenarios)
# Vector empirical powers and significance level
dataset$Test_Power_CE <- NA
dataset$Test_Power_RE <- NA
# blinded
dataset$Test_Power_ES <- NA
dataset$decision_ES <- NA
dataset$Test_Power_ES_SS <- NA
dataset$decision_ES_SS <- NA
# unblinded
dataset$Test_Power_ES_ub <- NA
dataset$decision_ES_ub <- NA
dataset$Test_Power_ES_ubSS <- NA
dataset$decision_ES_ubSS  <- NA
# Empirical alpha
dataset$Test_Reject_CE <- NA
dataset$Test_Reject_RE <- NA
dataset$Test_Reject_ES <- NA
dataset$Test_Reject_ES_ub <- NA
#########################################
# General Settings Simulations
#########################################
set.seed(4236)
# nsim: number of simulations
# nsim = 100000
nsim = 1000#test
# type i and ii errors
z.alpha <- qnorm(1-alpha,0,1)
z.beta <-  qnorm(1-beta,0,1)
#########################################
# Simulation under H1
# Simulating that one endpoint (endpoint2) has no effect
#########################################
t0=Sys.time()
#  COMPOSITE and RELEVANT ENDPOINT - Powers (for comparison)
# for(i in 1:dim(dataset)[1]){
#   dataset$Test_Power_CE[i] <- sum(replicate(nsim,f_OR(dataset$samplesize_e1[i]/2,dataset$p0_ce[i],dataset$p0_ce[i]))< - z.alpha)/nsim
#   dataset$Test_Power_RE[i] <- sum(replicate(nsim,f_OR(dataset$samplesize_e1[i]/2,dataset$p0_e1[i],dataset$p0_e1[i]))< - z.alpha)/nsim
#   print(i)
# }
#  ENDPOINT SELECTION - Blinded approach
for(i in 1:dim(dataset)[1]){
aux <- rowSums(replicate(nsim,eselectsim(ss_arm=round(dataset$samplesize_e1[i]/2),
p0_e1=dataset$p0_e1[i],OR1=dataset$OR1[i],
p0_e2=dataset$p0_e2[i],OR2=dataset$OR2[i],
p0_ce=dataset$p0_ce[i],p_init=dataset$p_init[i],
criteria="ARE",H0_e1=FALSE,H0_e2=TRUE))< c(-z.alpha,1))/nsim
dataset$Test_Power_ES[i]<- aux[1]
dataset$decision_ES[i]<- 1-aux[2]
print(i)
}
for(i in 1:dim(dataset)[1]){
aux <- rowSums(replicate(nsim,eselectsim(ss_arm=round(dataset$samplesize_e1[i]/2),
p0_e1=dataset$p0_e1[i],OR1=dataset$OR1[i],
p0_e2=dataset$p0_e2[i],OR2=dataset$OR2[i],
p0_ce=dataset$p0_ce[i],p_init=dataset$p_init[i],
criteria="SS",H0_e1=FALSE,H0_e2=TRUE))< c(-z.alpha,1))/nsim
dataset$Test_Power_ES_SS[i]<- aux[1]
dataset$decision_ES_SS[i]<- 1-aux[2]
print(i)
}
#  ENDPOINT SELECTION - Unblinded approach
for(i in 1:dim(dataset)[1]){
aux <- rowSums(replicate(nsim,eselectsim_ub(ss_arm=round(dataset$samplesize_e1[i]/2),
p0_e1=dataset$p0_e1[i],OR1=dataset$OR1[i],
p0_e2=dataset$p0_e2[i],OR2=dataset$OR2[i],
p0_ce=dataset$p0_ce[i],p_init=dataset$p_init[i],
criteria="ARE",H0_e1=FALSE,H0_e2=TRUE))< c(-z.alpha,1))/nsim
dataset$Test_Power_ES_ub[i]<- aux[1]
dataset$decision_ES_ub[i]<- 1-aux[2]
print(i)
}
for(i in 1:dim(dataset)[1]){
aux <- rowSums(replicate(nsim,eselectsim_ub(ss_arm=round(dataset$samplesize_e1[i]/2),
p0_e1=dataset$p0_e1[i],OR1=dataset$OR1[i],
p0_e2=dataset$p0_e2[i],OR2=dataset$OR2[i],
p0_ce=dataset$p0_ce[i],p_init=dataset$p_init[i],
criteria="SS",H0_e1=FALSE,H0_e2=TRUE))< c(-z.alpha,1))/nsim
dataset$Test_Power_ES_ubSS[i]<- aux[1]
dataset$decision_ES_ubSS[i]<- 1-aux[2]
print(i)
}
t1=Sys.time()-t0
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_H0True_e2_new.RData")
View(eselectsim)
