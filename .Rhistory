87+132+174
87+132+126
215-87+132
44+132+13
28+126+44
215-87+132
215-(87+132)
(87+132)
44+132+13
215-(87+132+28)
44+132+13
169-(44+132+13)
28+126+44
(87+132+28)
36+142+20
p0_e12 =
164-(36+142+20)
p0_e12
34-15
p0_ce =  p0_e1+p0_e2+p0_e3-p0_e12-p0_e23
p0_ce
p0_e1 = 0.037 #death
p0_e2 = 0.147 #mi
p0_e3 = 0.021 #stent
# probabilities e1 and e2; and e2 and e3; prob(e1 and e3) is assumed equal 0
p0_e12 = 15/969
p0_e23 = 19/969
# 164-(36+142+20)
p0_ce =  p0_e1+p0_e2+p0_e3-p0_e12-p0_e23
p0_ce
eselect(db,p0_e1,OR1=07,p0_e2,OR2=0.8,criteria="SS",alpha=0.05,beta=0.2)
1/exp(2)
1/exp(3)
K_init=2;K_max=5;n_arm=50
set.seed(2345)
K_new = sample(1:K_max,1) # number of added arms during the trial
K_total = K_new+K_init # total number experimental arms
T_arms = c(rep(0,K_init),runif(K_new)) # simulate starting times for the arms
T_arms = round(10*(T_arms[order(T_arms)])) #initial calendar (in weeks/months/...) starts at 0 and goes until 10
K_new
K_total
T_arms
T_arms
A_arms
A_arms = c(rep(1,K_init),rep(0,K_new)) # define vector active arms
N_rem = rep(n_arm,K_total) # remaining patients per arm
N_max = 2*n_arm*K_total  # max total sample size (worse case)
entry_times = runif(N_max) # entry times patients
A_arms
N_rem
N_max
entry_times
t=0 # init calendar time
alloc_time = list() # define allocation ratio over time
alloc_time[[t+1]] = list(time=t,active_arms=c(1,A_arms)) # allocation ratio at time 0
alloc_time
K_init
A_arms
alloc_time = matrix(c(t,A_arms),ncol=K_total+1)
alloc_time
data.frame(y,
trt,
time)
data.frame(y=NULL,
trt=NULL,
time=NULL)
data_gen = data.frame(y=NULL,
trt=NULL,
time=NULL)
ind_data = data.frame(y=NULL,
trt=NULL,
time=NULL)
ind_data
View(ind_data)
ind_data = data.frame(y=c(),
trt=c(),
time=c())
ind_data
View(ind_data)
ind_data[,1] = c(1,2,3)
ind_data[1,] = c(1,2,3)
ind_data = data.frame(y=c(0),
trt=c(0),
time=c(0))
ind_data
ind_data[,1] = c(1,2,3)
ind_data[1,] = c(1,2,3)
ind_data
alloc_time
alloc_time = list() # define allocation ratio over time
alloc_time[[t+1]] = list(time=t,active_arms=c(1,A_arms)) # allocation ratio at time 0
alloc_time
alloc_time[[2]]$active_arms
which(alloc_time[[t]]$active_arms>0)
which(alloc_time[[1]]$active_arms>0)
which(alloc_time[[1]]$active_arms>0)-1
sample(which(alloc_time[[1]]$active_arms>0)-1,10, replace = T)
sample(which(alloc_time[[1]]$active_arms>0)-1,10, replace = T)
pr=(alloc_time[[1]]$active_arms)/sum(alloc_time[[1]]$active_arms)
all_patient= sample(0:K_total, 10, replace = T, pr)
all_patient
pr
all_patient
which((alloc_time[[1]]$active_arms)==1)
#
prob_cbe(p_e1=p0_e1, p_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0), rho=0)
#############################################################################
rm(list = ls())
library(CompAREdesign)
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection")
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/aux_functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselect.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselectsim.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselect_ub.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/eselect/R/eselectsim_ub.R')
# Probabilities in the control group for E1, E2 and E3
p0_e1 = 0.15
p0_e2 = 0.50
p0_e3 = 0.23
# Overlap between components E2 and E3
# Bounds for the relative overlap
ro0_b = c(max(0,p0_e2+p0_e3-1),min(p0_e2/p0_e3,p0_e3/p0_e2))
ro0_e23 = 0.4
p0_e23 = (ro0_e23*(p0_e2+p0_e3))/(1+ro0_e23)
corr0 = (p0_e23 - p0_e2*p0_e3)/sqrt(p0_e2*(1-p0_e2)*p0_e3*(1-p0_e3))
corr0
lower_corr(p_e1=p0_e2, p_e2=p0_e3)
upper_corr(p_e1=p0_e2, p_e2=p0_e3)
prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=corr0)
#
prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0)
#
prob_cbe(p_e1=p0_e1, p_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0), rho=0)
#
prob_cbe(p_e1=p0_e1, p_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0), rho=0.2)
#
prob_cbe(p_e1=p0_e1, p_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0), rho=0.5)
#
prob_cbe(p_e1=p0_e1, p_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0), rho=0.4)
#
prob_cbe(p_e1=p0_e1, p_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0), rho=0.3)
#
prob_cbe(p_e1=p0_e1, p_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0), rho=0)
library(CompAREdesign)
library(ggplot2)
# function
plot_ce <- function(...){
chars <- substitute(...)
title = NULL
if(sum(grepl("samplesize", chars, fixed = TRUE))>0){
title = "Sample size"
}
if(sum(grepl("effectsize", chars, fixed = TRUE))>0){
title = "Effect size"
}
if(is.null(title) == TRUE){
title = "plot_ce"
}
# p <- ggplot(data = data.frame(x = 0), mapping = aes(x = x))
# p + stat_function(fun = input)
plot(..., ylab=title)
}
plot_ce(prob_cbe(p_e1=p0_e1, p_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0), rho=0))
plot_ce(prob_cbe(p_e1=p0_e1, p_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0), rho=c(0,0.1,0.2,0.3)))
plot_ce(prob_cbe(p_e1=p0_e1, p_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0), rho=c(0,0.1,0.2,0.3)))
plot_ce(samplesize_cbe(
p0_e1=0.1,
p0_e2=0.2,
eff_e1=0.7,
effm_e1="or",
eff_e2=0.8,
effm_e2="or",
effm_ce = "or",
rho=c(0,0.1,0.2,0.3,0.4,0.5),
alpha = 0.05,
beta = 0.2,
unpooled = TRUE
))
library(CompAREdesign)
library(ggplot2)
# function
plot_ce <- function(...){
chars <- substitute(...)
title = NULL
if(sum(grepl("samplesize", chars, fixed = TRUE))>0){
title = "Sample size"
}
if(sum(grepl("effectsize", chars, fixed = TRUE))>0){
title = "Effect size"
}
if(is.null(title) == TRUE){
title = "plot_ce"
}
# p <- ggplot(data = data.frame(x = 0), mapping = aes(x = x))
# p + stat_function(fun = input)
plot(..., ylab=title)
}
# general  example
db <- data.frame(x=c(1:10),y=2*c(1:10))
fun <- function(x){x+1}
plot_ce(fun(c(1:10)), xlab="Example")
# sample size example
plot_ce(samplesize_cbe(
p0_e1=0.1,
p0_e2=0.2,
eff_e1=0.7,
effm_e1="or",
eff_e2=0.8,
effm_e2="or",
effm_ce = "or",
rho=c(0,0.1,0.2,0.3,0.4,0.5),
alpha = 0.05,
beta = 0.2,
unpooled = TRUE
))
plot_ce(prob_cbe(p_e1=p0_e1, p_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0), rho=c(0,0.1,0.2,0.3)))
samplesize_cbe(
p0_e1=p0_e1,
p0_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0),
eff_e1=0.66,
effm_e1="or",
eff_e2=0.47,
effm_e2="or",
effm_ce = "or",
rho=c(0,0.1,0.2,0.3,0.4,0.5),
alpha = 0.05,
beta = 0.2,
unpooled = TRUE
)
plot_ce(samplesize_cbe(
p0_e1=p0_e1,
p0_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0),
eff_e1=0.66,
effm_e1="or",
eff_e2=0.47,
effm_e2="or",
effm_ce = "or",
rho=c(0,0.1,0.2,0.3,0.4,0.5),
alpha = 0.05,
beta = 0.2,
unpooled = TRUE
))
samplesize_cbe(
p0_e1=p0_e1,
p0_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0),
eff_e1=0.66,
effm_e1="or",
eff_e2=0.47,
effm_e2="or",
effm_ce = "or",
rho=c(0,0.1,0.2,0.3,0.4,0.5),
alpha = 0.05,
beta = 0.2,
unpooled = TRUE
)
samplesize_cbe(
p0_e1=p0_e1,
p0_e2=prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0),
eff_e1=0.66,
effm_e1="or",
eff_e2=0.47,
effm_e2="or",
effm_ce = "or",
rho=c(0,0.1,0.2,0.3,0.4,0.5),
alpha = 0.05,
beta = 0.2,
unpooled = TRUE
)
# Correlation bounds adding third component:
lower_corr(p_e1=p0_ce1, p_e2=p0_e1)
upper_corr(p_e1=p0_ce1, p_e2=p0_e1)
p0_ce1 = prob_cbe(p_e1=p0_e2, p_e2=p0_e3, rho=0)
# Correlation bounds adding third component:
lower_corr(p_e1=p0_ce1, p_e2=p0_e1)
upper_corr(p_e1=p0_ce1, p_e2=p0_e1)
